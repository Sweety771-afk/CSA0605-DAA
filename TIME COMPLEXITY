# Example 1: O(n) - Linear Time Complexity
def print_numbers(n):
    for i in range(n):
        print(i)

# Example 2: O(n^2) - Quadratic Time Complexity
def print_pairs(n):
    for i in range(n):
        for j in range(n):
            print((i, j))

# Example 3: O(log n) - Logarithmic Time Complexity
def binary_search(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            print("Target found at index", mid)
            return
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    print("Target not found")
# Example 4: O(n log n) - Linearithmic Time Complexity
def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = merge_sort(arr[:mid])
    right = merge_sort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    while left and right:
        if left[0] < right[0]:
            result.append(left.pop(0))
        else:
            result.append(right.pop(0))
    result.extend(left)
    result.extend(right)
    return result

# Test the functions
n = 1000

